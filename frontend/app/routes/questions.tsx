import type { ActionArgs, LoaderArgs, V2_MetaFunction } from "@remix-run/node";
import { json, redirect } from "@remix-run/node";
import { Form, Link, useActionData, useSearchParams } from "@remix-run/react";
import { useEffect, useRef } from "react";
import {CreateQuestions} from '/models/questions.server'


import { safeRedirect, validateEmail } from "~/utils";

// const res = await fetch(localhost);

export const loader = async ({ request }: LoaderArgs) => {
//     const formData = await request.formData();
//     const question_style = formData.get("question_style")
//     const exam_board = formData.get("exam_board");
//     const qualification = formData.get("qualification");
//     const subject = safeRedirect(formData.get("subject"), "/");
//     const topic = formData.get("topic");

//    const questions = fetch('localhost:8080')


//     //If questions generated by chatgpt then redirect to flashcards and display the json 

//   if (questions) return redirect("/flashcards");
//   return json({});
return "This is a test"

};

export const action = async ({ request }: ActionArgs) => {
//   const formData = await request.formData();
//   const question_style = formData.get("question_style")
//   const exam_board = formData.get("exam_board");
//   const qualification = formData.get("qualification");
//   const subject = safeRedirect(formData.get("subject"), "/");
//   const topic = formData.get("topic");

};


const inputClassName = `w-full rounded border border-gray-500 px-2 py-1 text-lg`;

export default function NewQuestionRoute() {
  const [searchParams] = useSearchParams();
  const redirectTo = searchParams.get("redirectTo") || "/";
//   const actionData = useActionData<typeof action>();
//   const emailRef = useRef<HTMLInputElement>(null);
//   const passwordRef = useRef<HTMLInputElement>(null);

//   useEffect(() => {
//     if (actionData?.errors?.email) {
//       emailRef.current?.focus();
//     } else if (actionData?.errors?.password) {
//       passwordRef.current?.focus();
//     }
//   }, [actionData]);

  return (
    <div className="flex min-h-full flex-col justify-center">
      <div className="mx-auto w-full max-w-md px-8">
        <Form method="post" className="space-y-6" >


            <p>
            <label
                htmlFor="question_style">
             
              
                Question Style 
                <select
                id="style"
                name="style"
                className={inputClassName}
              >
                <option value="multiple choice">Multiple Choice</option>
                <option value="fill-in-the-blank">Fill-in-the-Blank</option>
                <option value="true/false">True/False</option>
                <option value="short answer">Short Answer</option>
              </select>
              </label>
           
            
            </p>

            <p>
                <label>

                    Exam Board

                    <input    type="text"  name="exam_board" className={inputClassName}/>
                </label>
            </p>

            <p>
                <label>
                    Qualification
                    <input  type="text"  name="qualification" className={inputClassName}/>
                </label>
            </p>

            <p>
                <label>
                    Subject 
                    
                    <input  type="text"  name="subject" className={inputClassName}/>
                </label>
            </p>

            <p>
                <label>
                    Topic
                    <input  type="text"  name="topic" className={inputClassName}/>
                </label>
            </p>

           <div>
            <button type="submit"  className="rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400 disabled:bg-blue-300">
Generate Questions
            </button>
           </div>
      
         
        </Form>
      </div>
    </div>
  );
}
